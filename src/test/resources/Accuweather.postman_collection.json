{
	"info": {
		"_postman_id": "cd0b61d4-e397-45da-9d75-9733a22b30d5",
		"name": "Accuweather",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29097413"
	},
	"item": [
		{
			"name": "Locations API",
			"item": [
				{
					"name": "Admin Area List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(21);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].LocalizedName).to.eql(\"Andrijevica\");\r",
									"});  \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/locations/v1/adminareas/MEA",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"locations",
								"v1",
								"adminareas",
								"MEA"
							]
						}
					},
					"response": []
				},
				{
					"name": "Country List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(2);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].LocalizedName).to.eql(\"Greenland\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/locations/v1/countries/ARC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"locations",
								"v1",
								"countries",
								"ARC"
							]
						}
					},
					"response": []
				},
				{
					"name": "Region List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].LocalizedName).to.eql(\"Africa\");\r",
									"});  \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/locations/v1/regions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"locations",
								"v1",
								"regions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autocomplete Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].LocalizedName).to.eql(\"Berlin\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/locations/v1/cities/autocomplete?q=berlin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"locations",
								"v1",
								"cities",
								"autocomplete"
							],
							"query": [
								{
									"key": "q",
									"value": "berlin"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by locationKey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().LocalizedName).to.eql(\"Porcheville\");\r",
									"});  \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/locations/v1/620",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"locations",
								"v1",
								"620"
							]
						}
					},
					"response": []
				},
				{
					"name": "City Neighbors by locationKey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].LocalizedName).to.eql(\"Mantes-la-Jolie\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/locations/v1/cities/neighbors/620",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"locations",
								"v1",
								"cities",
								"neighbors",
								"620"
							]
						}
					},
					"response": []
				},
				{
					"name": "City Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].EnglishName).to.eql(\"Missouri\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/locations/v1/cities/search?q=Missouri",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"locations",
								"v1",
								"cities",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "Missouri"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Indices API",
			"item": [
				{
					"name": "5 Days of Daily Index Values for a Group of Indices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(15);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].Name).to.eql(\"Fishing Forecast\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/indices/v1/daily/5day/52/groups/8",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"indices",
								"v1",
								"daily",
								"5day",
								"52",
								"groups",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "5 Days of Daily Index Values for a Specific Index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(5);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].Name).to.eql(\"Outdoor Concert Forecast\");\r",
									"});  \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/indices/v1/daily/5day/52/8",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"indices",
								"v1",
								"daily",
								"5day",
								"52",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "5 Days of Daily Index Values for All Indices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(240);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].Name).to.eql(\"Flight Delays\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/indices/v1/daily/5day/52",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"indices",
								"v1",
								"daily",
								"5day",
								"52"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of Daily Indices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(117);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].Name).to.eql(\"Air Conditioning Index\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/indices/v1/daily",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"indices",
								"v1",
								"daily"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of Index Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(47);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].Name).to.eql(\"All API\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/indices/v1/daily/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"indices",
								"v1",
								"daily",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of Indices in a Specific Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].Name).to.eql(\"Fishing Forecast\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/indices/v1/daily/groups/8",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"indices",
								"v1",
								"daily",
								"groups",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "1 Day of Daily Index Values for a Group of Indices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].Name).to.eql(\"Fishing Forecast\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/indices/v1/daily/1day/5/groups/8",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"indices",
								"v1",
								"daily",
								"1day",
								"5",
								"groups",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "1 Day of Daily Index Values for a Specific Index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].Name).to.eql(\"Outdoor Concert Forecast\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/indices/v1/daily/1day/5/8",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"indices",
								"v1",
								"daily",
								"1day",
								"5",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "1 Day of Daily Index Values for All Indices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(48);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].Name).to.eql(\"Flight Delays\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/indices/v1/daily/1day/5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"indices",
								"v1",
								"daily",
								"1day",
								"5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Current Conditions API",
			"item": [
				{
					"name": "Current Conditions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].MobileLink).to.eql(\"http://www.accuweather.com/en/jp/oga-shi/16/current-weather/16?lang=en-us\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/currentconditions/v1/15",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"currentconditions",
								"v1",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Historical Current Conditions (past 24 hours)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(24);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].MobileLink).to.eql(\"http://www.accuweather.com/en/gr/logos/2285860/current-weather/2285860?lang=en-us\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/currentconditions/v1/5/historical/24",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"currentconditions",
								"v1",
								"5",
								"historical",
								"24"
							]
						}
					},
					"response": []
				},
				{
					"name": "Historical Current Conditions (past 6 hours)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).is.eq(6);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json()[0].Link).to.eql(\"http://www.accuweather.com/en/gr/logos/2285860/current-weather/2285860?lang=en-us\");\r",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/currentconditions/v1/5/historical",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"currentconditions",
								"v1",
								"5",
								"historical"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Alarm",
			"item": [
				{
					"name": "15 Days of Weather Alarms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Api Authorization failed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/alarms/v1/15day//290421",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"alarms",
								"v1",
								"15day",
								"",
								"290421"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "in",
				"value": "query",
				"type": "string"
			},
			{
				"key": "key",
				"value": "apikey",
				"type": "string"
			},
			{
				"key": "value",
				"value": "4mntXiAzkJI6JWapQAWQHhWVUD7VEI1E",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://dataservice.accuweather.com",
			"type": "string"
		}
	]
}